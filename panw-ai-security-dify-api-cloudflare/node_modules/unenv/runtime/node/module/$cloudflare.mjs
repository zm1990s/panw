export {
  Module,
  SourceMap,
  _cache,
  _extensions,
  _debug,
  _pathCache,
  _findPath,
  _initPaths,
  _load,
  _nodeModulePaths,
  _preloadModules,
  _resolveFilename,
  _resolveLookupPaths,
  builtinModules,
  constants,
  enableCompileCache,
  findSourceMap,
  getCompileCacheDir,
  globalPaths,
  isBuiltin,
  register,
  runMain,
  syncBuiltinESMExports,
  wrap
} from "./index.mjs";
import {
  Module as Module2,
  SourceMap as SourceMap2,
  _cache as _cache2,
  _extensions as _extensions2,
  _debug as _debug2,
  _pathCache as _pathCache2,
  _findPath as _findPath2,
  _initPaths as _initPaths2,
  _load as _load2,
  _nodeModulePaths as _nodeModulePaths2,
  _preloadModules as _preloadModules2,
  _resolveFilename as _resolveFilename2,
  _resolveLookupPaths as _resolveLookupPaths2,
  builtinModules as builtinModules2,
  constants as constants2,
  enableCompileCache as enableCompileCache2,
  findSourceMap as findSourceMap2,
  getCompileCacheDir as getCompileCacheDir2,
  globalPaths as globalPaths2,
  isBuiltin as isBuiltin2,
  register as register2,
  runMain as runMain2,
  syncBuiltinESMExports as syncBuiltinESMExports2,
  wrap as wrap2
} from "./index.mjs";
import { notImplemented } from "../../_internal/utils.mjs";
const workerdModule = process.getBuiltinModule("node:module");
export const createRequire = (file) => {
  return Object.assign(workerdModule.createRequire(file), {
    resolve: Object.assign(notImplemented("module.require.resolve"), {
      paths: notImplemented("module.require.resolve.paths")
    }),
    cache: /* @__PURE__ */ Object.create(null),
    extensions: _extensions2,
    main: void 0
  });
};
export default {
  Module: Module2,
  SourceMap: SourceMap2,
  _cache: _cache2,
  _extensions: _extensions2,
  _debug: _debug2,
  _pathCache: _pathCache2,
  _findPath: _findPath2,
  _initPaths: _initPaths2,
  _load: _load2,
  _nodeModulePaths: _nodeModulePaths2,
  _preloadModules: _preloadModules2,
  _resolveFilename: _resolveFilename2,
  _resolveLookupPaths: _resolveLookupPaths2,
  builtinModules: builtinModules2,
  enableCompileCache: enableCompileCache2,
  constants: constants2,
  createRequire,
  findSourceMap: findSourceMap2,
  getCompileCacheDir: getCompileCacheDir2,
  globalPaths: globalPaths2,
  isBuiltin: isBuiltin2,
  register: register2,
  runMain: runMain2,
  syncBuiltinESMExports: syncBuiltinESMExports2,
  wrap: wrap2
};
