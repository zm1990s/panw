import type { Context, MiddlewareHandler, Env, ValidationTargets, TypedResponse } from 'hono';
import type { z, ZodError } from 'zod';
export type Hook<T, E extends Env, P extends string, O = {}> = (result: {
    success: true;
    data: T;
} | {
    success: false;
    error: ZodError;
    data: T;
}, c: Context<E, P>) => Response | Promise<Response> | void | Promise<Response | void> | TypedResponse<O>;
type HasUndefined<T> = undefined extends T ? true : false;
export declare const zValidator: <T extends z.ZodType<any, z.ZodTypeDef, any>, Target extends keyof ValidationTargets, E extends Env, P extends string, I = z.input<T>, O = z.output<T>, V extends {
    in: HasUndefined<I> extends true ? { [K in Target]?: I | undefined; } : { [K_1 in Target]: I; };
    out: { [K_2 in Target]: O; };
} = {
    in: HasUndefined<I> extends true ? { [K_3 in Target]?: I | undefined; } : { [K_4 in Target]: I; };
    out: { [K_5 in Target]: O; };
}>(target: Target, schema: T, hook?: Hook<z.TypeOf<T>, E, P, {}> | undefined) => MiddlewareHandler<E, P, V>;
export {};
